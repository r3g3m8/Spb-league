generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  name     String
  surname  String
  news     News[]
  ticket   Ticket[]
}

model News {
  id           Int     @id @default(autoincrement())
  title        String
  content      String?
  publish_date String?
  image        String
  authorId     Int?
  author       User?   @relation(fields: [authorId], references: [id], onDelete: Restrict)
}

model Stadium {
  id      Int     @id @default(autoincrement())
  city    String
  address String
  name    String?
  team    Team[]
}

model Team {
  id        Int      @id @default(autoincrement())
  stadiumId Int
  name      String   @unique
  logo      String
  scored    Int?
  conceded  Int?
  points    Int?
  wins Int?
  draws Int?
  loses Int?
  games Int?
  awayMatch Match[]  @relation("AwayTeam")
  homeMatch Match[]  @relation("HomeTeam")
  player    Player[]
  stadium   Stadium  @relation(fields: [stadiumId], references: [id])
}

model Player {
  id       Int    @id @default(autoincrement())
  teamId   Int
  name     String
  surname String?
  position String
  number   Int?
  goals Int?
  assists Int?
  team     Team   @relation(fields: [teamId], references: [id])
}

model Match {
  id         Int     @id @default(autoincrement())
  homeTeamId Int
  awayTeamId Int
  date       String?
  time       String?
  tour       Int?
  result     String?
  awayTeam   Team    @relation("AwayTeam", fields: [awayTeamId], references: [id], onDelete: Cascade)
  homeTeam   Team    @relation("HomeTeam", fields: [homeTeamId], references: [id], onDelete: Cascade)
  ticket     Ticket[]
}

model Ticket {
  id      Int   @id @default(autoincrement())
  matchId Int   
  fanId   Int   
  fan     User  @relation(fields: [fanId], references: [id], onDelete: Cascade)
  match   Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
}
